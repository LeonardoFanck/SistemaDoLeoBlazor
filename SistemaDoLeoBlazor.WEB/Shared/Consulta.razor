@inject IClienteService clienteService
@inject IOperadorService operadorService

<div class="row d-flex d-xl-flex justify-content-center justify-content-xl-center">
    <div class="col-sm-12 col-lg-10 col-xl-9 col-xxl-7 bg-white shadow-lg" style="border-radius: 5px;margin-top: 60px;">
        <div class="card shadow">
            <div class="card-header d-flex flex-wrap justify-content-center align-items-center justify-content-sm-between gap-3">
                <h5 class="display-6 text-nowrap text-capitalize mb-0">Consulta</h5>
            </div>
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Busca</h4>
                    <div class="row" style="margin-top: 10px;">
                        <div class="col-md-6" style="width: 154.703px;">
                            <select style="margin-top: 3px;">
                                <option value="12" selected="">Teste</option>
                            </select>
                        </div>
                        <div class="col-md-6"><input type="search" style="border-style: solid;width: 386px;" placeholder="Busca"></div>
                    </div>
                </div>
            </div>
            <hr>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="width: 80.5px;">Cod</th>
                                <th class="justify-content-xxl-start align-items-xxl-center text-center" style="width: 179px;">Produto</th>
                                <th class="text-center" style="width: 75px;">Valor</th>
                                <th class="text-center" style="width: 55px;">Qntd</th>
                                <th class="text-center" style="width: 64px;">Desc %</th>
                                <th class="text-center" style="width: 114px;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="text-truncate" style="max-width: 200px;width: 80.5px;">00</td>
                                <td class="text-center" style="width: 179px;text-align: left;">Teste</td>
                                <td class="text-center" style="width: 75px;"></td>
                                <td class="text-center" style="width: 55px;"></td>
                                <td class="text-center" style="width: 64px;"></td>
                                <td class="text-center" style="width: 114px;"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter] public EventCallback<int> idReturn { get; set; }
    [Parameter] public tipoConsultas tipo { get; set; }

    private string querry { get; set; } = string.Empty;
    private string filtro { get; set; } = "teste";
    private List<OperadorDTO>? listaOperador { get;set; }
    private List<OperadorDTO>? listaOperadorResultado { get;set; }

    public enum tipoConsultas
    {
        operador,
        cliente,
        produto,
        formaPgto,
        categoria,
        pedido
    }

    private class resultadoConsulta
    {
        private string largura;
        private string textAlign;
        private object resultado;

        public resultadoConsulta(string largura, string textAlign, object resultado)
        {
            this.largura = largura;
            this.textAlign = textAlign;
            this.resultado = resultado;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await verificaConsulta(tipo);

        await filtrarResultados(filtro, querry);
    }

    private async Task verificaConsulta(tipoConsultas tipo)
    {
        switch (tipo)
        {
            case tipoConsultas.operador:
                await getOperadores();
            break;
            // case tipoConsultas.cliente:
            //     getClientes();
            // break;
            // case tipoConsultas.produto:
            //     getProdutos();
            // break;
            // case tipoConsultas.formaPgto:
            //     getFormaPgto();
            // break;
            // case tipoConsultas.categoria:
            //     getCategoria();
            // break;
            // case tipoConsultas.pedido:
            //     getPedidos();
            // break;
        }
    }

    private async Task filtrarResultados(string filtro, string querry){

        switch (tipo)
        {
            case tipoConsultas.operador:
                switch (filtro)
                {
                    case "Codigo":
                        listaOperadorResultado = listaOperador.Where(o => o.id.Equals(querry)).ToList();
                    break;
                }
            break;
        }
    }

    private async Task getOperadores(){
        try
        {
            var operadores = await operadorService.GetAllOperadores();

            listaOperador = operadores.ToList();
        }
        catch (Exception ex)
        {
    
            throw;
        }
    }



}