@using SistemaDoLeoBlazor.MODELS.ProdutoDTO
@using SistemaDoLeoBlazor.MODELS.PedidoDTO
@inject IProdutoService produtoService
@inject IPedidoService pedidoService

@if(produto is null)
{
    <LoadingComponent />
}
else
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@operacaoItem Produto</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                @if (erro != string.Empty)
                {
                    <div class="alert alert-danger" role="alert">
                        @erro
                    </div>
                }

                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6" style="width: 154.281px;">
                                    <input class="form-control form-control-user" type="number" placeholder="Cod" required="" style="width: 141px;"
                                           name="Cod" disabled="@stsCodProd" @bind-value="@produto.produtoId" @bind-value:event="oninput"
                                           @onblur="validaBuscaProduto">
                                </div>
                                <div class="col-md-6" style="width: 115.328px;">
                                    <button class="btn btn-primary" type="button" tabindex="-1" disabled="@stsBtnPesquisa"
                                            @onclick="(() => openPesquisaDialog())">Pesquisar</button>
                                </div>
                                <div class="col">
                                    <input class="form-control" type="text" disabled="@stsNome" @bind="@produto.produtoNome">
                                </div>
                            </div>
                            <div class="row" style="margin-top: 24px;">
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Valor</h4>
                                            <input class="form-control" type="number" step=".01" @bind-value="@produto.valor" @bind-value:event="oninput"
                                                   @onblur="recalcularValores">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3 col-xxl-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Quantidade</h4>
                                            <input class="form-control" type="number" @bind-value="@produto.quantidade" @bind-value:event="oninput"
                                                   @onblur="recalcularValores">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Desconto</h4>
                                            <input class="form-control" type="number" step=".01" @bind-value="@produto.desconto" @bind-value:event="oninput"
                                                   @onblur="recalcularValores">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Total</h4>
                                            <input class="form-control" type="number" step=".01" disabled="@stsTotal" 
                                                   @bind-value="@produto.total" @bind-value:event="oninput">
                                        </div>
                                    </div>
                                </div>
                                @*Estoque*@
                                <div class="col-md-6" style="margin-top: 10px;">
                                    <div class="card" style="height:97px; background-color:lightgray">
                                        <div class="card-body">
                                            <h4 class="card-title">Estoque + Novo Estoque</h4>
                                            @if (pedido.tipoOperacao.Equals("Venda"))
                                            {
                                                <p style="font-size: 23px; margin-left: 20px;">@estoque - @produto.quantidade = @(@estoque - @produto.quantidade)</p>
                                            }
                                            else
                                            {
                                                <p style="font-size: 23px; margin-left: 20px;">@estoque + @produto.quantidade = @(@estoque + @produto.quantidade)</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" tabindex="-1" data-bs-dismiss="modal" @onclick="ModalCancel">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="finalizaOperacao">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    @if (pesquisaDialogOpen)
    {
        <Consulta tipo="Consulta.tipoConsultas.produto" inativos="pesquisaInativos" idReturn="@onPesquisaDialogClose"></Consulta>
    }
}

@code {
    [Parameter] public PedidoItemDTO? produto { get; set; }
    [Parameter] public PedidoDTO? pedido { get; set; }
    [Parameter] public string? operacaoItem { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private int idProdutoAtual { get; set; }

    private bool stsCodProd { get; set; }
    private bool stsBtnPesquisa { get; set; }
    private bool stsNome { get; set; } = true;
    private bool stsTotal { get; set; } = true;

    private string erro { get; set; } = string.Empty;
    private long estoque { get; set; } = 0;

    // PESQUISA
    private bool pesquisaDialogOpen { get; set; }
    private bool pesquisaInativos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (operacaoItem.Equals("Alterar"))
        {
            stsCodProd = true;
            stsBtnPesquisa = true;
        }
    }

    private async void validaBuscaProduto()
    {
        if (idProdutoAtual != produto.produtoId)
        {
            await getProduto(produto.produtoId);
            StateHasChanged();
        }
    }

    private async Task getProduto(int id)
    {
        try
        {
            var prod = await produtoService.GetById(id);

            idProdutoAtual = prod.id;

            if (pedido.tipoOperacao.Equals("Venda"))
            {
                produto = new PedidoItemDTO
                {
                    pedidoId = pedido.id,
                    produtoId = prod.id,
                    produtoNome = prod.nome,
                    desconto = 0,
                    quantidade = 1,
                    valor = prod.preco,
                    total = prod.preco
                };
            }
            else
            {
                produto = new PedidoItemDTO
                {
                    pedidoId = pedido.id,
                    produtoId = prod.id,
                    produtoNome = prod.nome,
                    desconto = decimal.Zero,
                    quantidade = 1,
                    valor = prod.custo,
                    total = prod.custo
                };
            }

            estoque = prod.estoque;
        }
        catch(HttpRequestException ex)
        {
            if(ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                produto.produtoNome = "[PRODUTO NÃO LOCALIZADO]";
                produto.desconto = decimal.Zero;
                produto.quantidade = 0;
                produto.valor = decimal.Zero;
                produto.total = decimal.Zero;
            }
        }
    }

    private async Task recalcularValores()
    {
        var valor = produto.valor;
        var quantidade = produto.quantidade;

        if (produto.desconto > 100)
        {
            produto.desconto = 100;
        }
        else if (pedido.desconto < 0)
        {
            pedido.desconto = 0;
        }

        var desconto = produto.desconto / 100;

        var total = (valor * quantidade) - ((valor * quantidade) * desconto);

        produto.total = total;
    }

    private async Task salvarProduto()
    {
        await pedidoService.InsertItem(produto);
    }

    private async Task alterarProduto()
    {
        await pedidoService.UpdateItem(produto);
    }

    private async Task finalizaOperacao()
    {
        try
        {
            await validarCampos();
            await recalcularValores();

            if (operacaoItem.Equals("Adicionar"))
            {
                await salvarProduto();
            }
            else
            {
                await alterarProduto();
            }

            await ModalOk();
        }
        catch(FormatException ex)
        {
            erro = ex.Message;
            StateHasChanged();

            await Task.Delay(10000);
            erro = string.Empty;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            erro = ex.Message;
        }
    }

    private async Task validaProduto(int id)
    {
        try
        {
            var prod = await produtoService.GetById(id);
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                produto.produtoNome = "[PRODUTO NÃO LOCALIZADO]";
            }
        }
    }

    private async Task validarCampos()
    {
        if (produto.produtoId == 0)
        {
            throw new FormatException("Campo Cod Produto não pode estar vazio");
        }
        else
        {
            await validaProduto(produto.produtoId);

            if (produto.produtoNome.Equals("[PRODUTO NÃO LOCALIZADO]") || produto.produtoNome.Equals(""))
            {
                throw new FormatException("Produto inválido");
            }
        }

        if (produto.quantidade == 0)
        {
            throw new FormatException("Campo quantidade não pode ser 0");
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }

    private void openPesquisaDialog()
    {
        pesquisaInativos = false;
        pesquisaDialogOpen = true;
        StateHasChanged();
    }

    private async void onPesquisaDialogClose(int id)
    {
        if (id != -1)
        {
            await getProduto(id);
        }

        pesquisaDialogOpen = false;

        StateHasChanged();
    }
}